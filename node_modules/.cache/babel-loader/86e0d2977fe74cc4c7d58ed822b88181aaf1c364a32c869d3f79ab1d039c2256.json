{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst mysql = require('mysql2');\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'root',\n  database: 'beauty_academy'\n});\n\n// Endpoint per ottenere le recensioni approvate\nrouter.get('/recensioni-approvate', (req, res) => {\n  connection.query('SELECT * FROM recensioni WHERE approvato = TRUE', (err, results) => {\n    if (err) {\n      console.error('Errore nel recupero delle recensioni approvate:', err);\n      return res.status(500).send('Errore nel server');\n    }\n    res.json(results);\n  });\n});\n\n// Endpoint per ottenere le recensioni in attesa\nrouter.get('/recensioni-pending', (req, res) => {\n  connection.query('SELECT * FROM recensioni WHERE approvato = FALSE', (err, results) => {\n    if (err) {\n      console.error('Errore nel recupero delle recensioni in attesa:', err);\n      return res.status(500).send('Errore nel server');\n    }\n    res.json(results);\n  });\n});\n\n// Endpoint per aggiungere una recensione\nrouter.post('/aggiungi-recensione', (req, res) => {\n  const {\n    nome_cliente,\n    recensione,\n    valutazione\n  } = req.body;\n  const query = 'INSERT INTO recensioni (nome_cliente, recensione, valutazione) VALUES (?, ?, ?)';\n  connection.query(query, [nome_cliente, recensione, valutazione], (err, result) => {\n    if (err) {\n      console.error('Errore nell\\'invio della recensione:', err);\n      return res.status(500).send('Errore nell\\'invio della recensione');\n    }\n    res.status(201).json({\n      id: result.insertId,\n      nome_cliente,\n      recensione,\n      valutazione\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","mysql","connection","createConnection","host","user","password","database","get","req","res","query","err","results","console","error","status","send","json","post","nome_cliente","recensione","valutazione","body","result","id","insertId","module","exports"],"sources":["C:/Users/tnigh/Desktop/MAMMA/beauty-armony-academy/src/pages/GestioneRecensioni.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst mysql = require('mysql2');\r\n\r\nconst connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: 'root',\r\n  database: 'beauty_academy',\r\n});\r\n\r\n// Endpoint per ottenere le recensioni approvate\r\nrouter.get('/recensioni-approvate', (req, res) => {\r\n  connection.query('SELECT * FROM recensioni WHERE approvato = TRUE', (err, results) => {\r\n    if (err) {\r\n      console.error('Errore nel recupero delle recensioni approvate:', err);\r\n      return res.status(500).send('Errore nel server');\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Endpoint per ottenere le recensioni in attesa\r\nrouter.get('/recensioni-pending', (req, res) => {\r\n  connection.query('SELECT * FROM recensioni WHERE approvato = FALSE', (err, results) => {\r\n    if (err) {\r\n      console.error('Errore nel recupero delle recensioni in attesa:', err);\r\n      return res.status(500).send('Errore nel server');\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Endpoint per aggiungere una recensione\r\nrouter.post('/aggiungi-recensione', (req, res) => {\r\n  const { nome_cliente, recensione, valutazione } = req.body;\r\n\r\n  const query = 'INSERT INTO recensioni (nome_cliente, recensione, valutazione) VALUES (?, ?, ?)';\r\n  connection.query(query, [nome_cliente, recensione, valutazione], (err, result) => {\r\n    if (err) {\r\n      console.error('Errore nell\\'invio della recensione:', err);\r\n      return res.status(500).send('Errore nell\\'invio della recensione');\r\n    }\r\n    res.status(201).json({\r\n      id: result.insertId,\r\n      nome_cliente,\r\n      recensione,\r\n      valutazione,\r\n    });\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,KAAK,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAE/B,MAAMI,UAAU,GAAGD,KAAK,CAACE,gBAAgB,CAAC;EACxCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,MAAM;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACAR,MAAM,CAACS,GAAG,CAAC,uBAAuB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAChDR,UAAU,CAACS,KAAK,CAAC,iDAAiD,EAAE,CAACC,GAAG,EAAEC,OAAO,KAAK;IACpF,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,iDAAiD,EAAEH,GAAG,CAAC;MACrE,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,mBAAmB,CAAC;IAClD;IACAP,GAAG,CAACQ,IAAI,CAACL,OAAO,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAd,MAAM,CAACS,GAAG,CAAC,qBAAqB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC9CR,UAAU,CAACS,KAAK,CAAC,kDAAkD,EAAE,CAACC,GAAG,EAAEC,OAAO,KAAK;IACrF,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,iDAAiD,EAAEH,GAAG,CAAC;MACrE,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,mBAAmB,CAAC;IAClD;IACAP,GAAG,CAACQ,IAAI,CAACL,OAAO,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAd,MAAM,CAACoB,IAAI,CAAC,sBAAsB,EAAE,CAACV,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAM;IAAEU,YAAY;IAAEC,UAAU;IAAEC;EAAY,CAAC,GAAGb,GAAG,CAACc,IAAI;EAE1D,MAAMZ,KAAK,GAAG,iFAAiF;EAC/FT,UAAU,CAACS,KAAK,CAACA,KAAK,EAAE,CAACS,YAAY,EAAEC,UAAU,EAAEC,WAAW,CAAC,EAAE,CAACV,GAAG,EAAEY,MAAM,KAAK;IAChF,IAAIZ,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEH,GAAG,CAAC;MAC1D,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;IACpE;IACAP,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACE,IAAI,CAAC;MACnBO,EAAE,EAAED,MAAM,CAACE,QAAQ;MACnBN,YAAY;MACZC,UAAU;MACVC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFK,MAAM,CAACC,OAAO,GAAG7B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}